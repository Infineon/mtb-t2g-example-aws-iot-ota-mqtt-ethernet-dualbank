/**********************************************************************************************************************
 * \file secure_config.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SECURE_CONFIG_H
#define SECURE_CONFIG_H

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "appversion.h"

#if defined(__cplusplus)
extern "C" {
#endif

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* Macros to define the secure image version and ID */
#define CY_SI_APP_VERSION(ma, mi, bd)        (((uint32_t)(ma) << 24u) | ((uint32_t)(mi) << 20u) | ((uint32_t)(bd) << 16u))

/* Size (in Bytes) of the digital signature */
#define CY_SI_SECURE_DIGSIG_SIZE             (256u)

/* Clock selection for Flash boot execution */
#define CY_SI_FLASHBOOT_CLK_8MHZ             (0UL)            /* 8MHz clock selection for Flashboot */
#define CY_SI_FLASHBOOT_CLK_25MHZ            (1UL)            /* 25MHz clock selection for Flashboot */
#define CY_SI_FLASHBOOT_CLK_50MHZ            (2UL)            /* 50MHz clock selection for Flashboot */
#define CY_SI_FLASHBOOT_CLK_100MHZ           (3UL)            /* USER Configuration */

/* Debugger wait window selection for Flash boot execution */
#define CY_SI_FLASHBOOT_WAIT_20MS            (0UL)            /* 20ms debugger wait window for Flashboot */
#define CY_SI_FLASHBOOT_WAIT_10MS            (1UL)            /* 10ms debugger wait window for Flashboot */
#define CY_SI_FLASHBOOT_WAIT_1MS             (2UL)            /* 1ms debugger wait window for Flashboot */
#define CY_SI_FLASHBOOT_WAIT_0MS             (3UL)            /* 0ms debugger wait window for Flashboot */
#define CY_SI_FLASHBOOT_WAIT_100MS           (4UL)            /* 100ms debugger wait window for Flashboot */

/* Debugger pin configuration */
#define CY_SI_FLASHBOOT_SWJ_DISABLE          (1UL)            /* Do not enable SWJ pins in Flash boot. Listen window is skipped */
#define CY_SI_FLASHBOOT_SWJ_ENABLE           (2UL)            /* Enable SWJ pins in Flash boot  */

/* Flash boot validation selection in chip NORMAL mode */
#define CY_SI_FLASHBOOT_VALIDATE_DISABLE     (1UL)            /* Do not validate app1 in NORMAL mode */
#define CY_SI_FLASHBOOT_VALIDATE_ENABLE      (2UL)            /* Validate app1 in NORMAL mode */

/* Flash boot loader configuration */
#define CY_SI_FLASHBOOT_FBLOADER_ENABLE      (1UL)            /* Internal bootloader is launched if the other bootloader conditions are met  */
#define CY_SI_FLASHBOOT_FBLOADER_DISABLE     (2UL)            /* Internal bootloader is disabled */

/* Application format selection for secure boot */
#define CY_SI_APP_FORMAT_BASIC               (0UL)            /* Basic application format (no header) */
#define CY_SI_APP_FORMAT_CYPRESS             (1UL)            /* Cypress application format (Cypress header) */

/* Application type selection for secure boot */
#define CY_SI_APP_ID_FLASHBOOT               (0x8001UL)       /* Flash boot ID Type */
#define CY_SI_APP_ID_SECUREIMG               (0x8002UL)       /* Secure image ID Type */
#define CY_SI_APP_ID_BOOTLOADER              (0x8003UL)       /* Bootloader ID Type */

/* Miscellaneous values */
#define CY_SI_TOC_FLAGS_CLOCKS_MASK          (0x00000003UL)   /* Mask for Flashboot clock selection */
#define CY_SI_TOC_FLAGS_CLOCKS_POS           (0UL)            /* Bit position of Flashboot clock selection */
#define CY_SI_TOC_FLAGS_DELAY_MASK           (0x0000001CUL)   /* Mask for Flashboot wait window selection */
#define CY_SI_TOC_FLAGS_DELAY_POS            (2UL)            /* Bit position of Flashboot wait window selection */
#define CY_SI_TOC_FLAGS_SWJEN_POS            (5UL)            /* Bit position of SWJ pin configuration */
#define CY_SI_TOC_FLAGS_APP_VERIFY_MASK      (0x80000000UL)   /* Mask for Flashboot NORMAL mode app1 validation */
#define CY_SI_TOC_FLAGS_APP_VERIFY_POS       (7UL)            /* Bit position of Flashboot NORMAL mode app1 validation */

#define CY_SI_TOC_FLAGS_FBLOADER_ENABLE_POS  (9UL)            /* Bit position of Flashboot Loader Enable */

#define CY_SI_TOC2_MAGICNUMBER               (0x01211220UL)   /* TOC2 identifier */

#define CY_SI_TOC2_OBJECTSIZE                (0x000001FCUL)   /* Number of TOC2 object */
#define CY_SI_SWPU_BEGIN                     (0x17007600UL)   /* Address of SWPU configuration */
#define CY_SI_TOC2_BEGIN                     (0x17007C00UL)   /* Address of TOC2 */

#define CY_SI_CM471_1stAPP_FLASH_BEGIN       (0UL)            /* Address of CM4/CM7_1 First User Application Object */
#define CY_SI_CM471_2ndAPP_FLASH_BEGIN       (0UL)            /* Address of CM4/CM7_1 Second User Application Object */
#define CY_SI_CM72_1stAPP_FLASH_BEGIN        (0UL)            /* Address of CM7_2 First User Application Object */
#define CY_SI_CM72_2ndAPP_FLASH_BEGIN        (0UL)            /* Address of CM7_2 Second User Application Object */

#define CY_SI_PUBLIC_KEY                     (0x17006400UL)   /* PUBLIC KEY address in SFlash */

#define CY_SI_CM0_ENABLE                     (0x00000001UL)   /* CM0 ACCESS PORT ENABLE */
#define CY_SI_CM0_DISABLE                    (0x00010000UL)   /* CM0 ACCESS PORT DISABLE */
#define CY_SI_CM4_ENABLE                     (0x00000002UL)   /* CM4 ACCESS PORT ENABLE */
#define CY_SI_CM4_DISABLE                    (0x00020000UL)   /* CM4 ACCESS PORT DISABLE */
#define CY_SI_SYS_ENABLE                     (0x00000004UL)   /* SYS ACCESS PORT ENABLE */
#define CY_SI_SYS_DISABLE                    (0x00040000UL)   /* SYS ACCESS PORT DISABLE */

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
/** Table of Content structure */
typedef struct
{
    volatile uint32_t objSize;                                /* Object size (Bytes) */
    volatile uint32_t magicNum;                               /* TOC ID (magic number) */
    volatile uint32_t smifCfgAddr;                            /* SMIF configuration structure */
    volatile uint32_t cm0pappAddr1;                           /* First user application object address */
    volatile uint32_t cm0pappFormat1;                         /* First user application format */
    volatile uint32_t cm0pappAddr2;                           /* Second user application object address */
    volatile uint32_t cm0pappFormat2;                         /* Second user application format */
    volatile uint32_t cm4_71appAddr1;                         /* Second user application format */
    volatile uint32_t cm4_71appAddr2;                         /* Second user application format */
    volatile uint32_t cm72appAddr1;                           /* Second user application format */
    volatile uint32_t cm72appAddr2;                           /* Second user application format */
    volatile uint32_t reserved1[53];                          /* Second user application format */
    volatile uint32_t shashObj;                               /* Number of additional objects to be verified (S-HASH) */
    volatile uint32_t sigKeyAddr;                             /* Signature verification key address */
    volatile uint32_t swpuAddr;                               /* Address of SWPU object */
    volatile uint32_t toc2Addr;                               /* Address of TOC2 */
    volatile uint32_t addObj[58];                             /* Additional objects to include in S-HASH */
    volatile uint32_t tocFlags;                               /* Flags in TOC to control Flash boot options */
    volatile uint32_t crc;                                    /* Reserved */
} cy_stc_si_toc_t;

/** Access restrictions */
typedef struct
{
    volatile uint32_t nar;                                    /* Normal Access Restrictions */
    volatile uint32_t ndar;                                   /* Normal Dead Access Restrictions */
} cy_stc_si_nar_t;

/** Secure image application header in Cypress format */
typedef struct
{
    volatile uint32_t objSize;                                /* Object size (Bytes) */
    volatile uint32_t appId;                                  /* Application ID/version */
    volatile uint32_t appAttributes;                          /* Attributes (reserved for future use) */
    volatile uint32_t numCores;                               /* Number of cores */
    volatile uint32_t core0Vt;                                /* (CM0+)VT offset - offset to the vector table from that entry */
    volatile uint32_t core0Id;                                /* CM0+ core ID */
} cy_stc_si_appheader_t;

#if defined(__cplusplus)
}
#endif

#endif /* SECURE_CONFIG_H */

/* [] END OF FILE */
